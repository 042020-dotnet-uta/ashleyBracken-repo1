//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingStartedClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    using System.Collections.Generic;

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Fruit", Namespace="http://schemas.datacontract.org/2004/07/GettingStartedLib")]
    [System.SerializableAttribute()]
    public partial class Fruit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Total", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/TotalResponse")]
        int Total(GettingStartedClient.ServiceReference1.Fruit[] fruits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/Total", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/TotalResponse")]
        System.Threading.Tasks.Task<int> TotalAsync(GettingStartedClient.ServiceReference1.Fruit[] fruits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/AddAFruit", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddAFruitResponse")]
        GettingStartedClient.ServiceReference1.Fruit[] AddAFruit(GettingStartedClient.ServiceReference1.Fruit[] fruitList, GettingStartedClient.ServiceReference1.Fruit fruit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/AddAFruit", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddAFruitResponse")]
        System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit[]> AddAFruitAsync(GettingStartedClient.ServiceReference1.Fruit[] fruitList, GettingStartedClient.ServiceReference1.Fruit fruit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/RemoveAFruit", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/RemoveAFruitResponse")]
        GettingStartedClient.ServiceReference1.Fruit[] RemoveAFruit(GettingStartedClient.ServiceReference1.Fruit[] fruitList, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/RemoveAFruit", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/RemoveAFruitResponse")]
        System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit[]> RemoveAFruitAsync(GettingStartedClient.ServiceReference1.Fruit[] fruitList, int index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : GettingStartedClient.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<GettingStartedClient.ServiceReference1.ICalculator>, GettingStartedClient.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Total(GettingStartedClient.ServiceReference1.Fruit[] fruits) {
            return base.Channel.Total(fruits);
        }
        
        public System.Threading.Tasks.Task<int> TotalAsync(GettingStartedClient.ServiceReference1.Fruit[] fruits) {
            return base.Channel.TotalAsync(fruits);
        }
        
        public GettingStartedClient.ServiceReference1.Fruit[] AddAFruit(GettingStartedClient.ServiceReference1.Fruit[] fruitList, GettingStartedClient.ServiceReference1.Fruit fruit) {
            return base.Channel.AddAFruit(fruitList, fruit);
        }
        
        public System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit[]> AddAFruitAsync(GettingStartedClient.ServiceReference1.Fruit[] fruitList, GettingStartedClient.ServiceReference1.Fruit fruit) {
            return base.Channel.AddAFruitAsync(fruitList, fruit);
        }
        
        public GettingStartedClient.ServiceReference1.Fruit[] RemoveAFruit(GettingStartedClient.ServiceReference1.Fruit[] fruitList, int index) {
            return base.Channel.RemoveAFruit(fruitList, index);
        }
        
        public System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit[]> RemoveAFruitAsync(GettingStartedClient.ServiceReference1.Fruit[] fruitList, int index) {
            return base.Channel.RemoveAFruitAsync(fruitList, index);
        }

        internal void AddAFruit(List<Fruit> fruits, Fruit orange)
        {
            throw new NotImplementedException();
        }
    }
}
